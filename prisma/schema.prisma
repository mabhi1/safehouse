generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model encryption {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  salt      String
  hash      String
  recovery  String
  uid       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model notes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  description String
  title       String
  uid         String
  updatedAt   DateTime @updatedAt
}

model passwords {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  password  String
  site      String
  uid       String
  updatedAt DateTime @updatedAt
  username  String
}

model shortcuts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  image     String
  name      String
  uid       String
  updatedAt DateTime @updatedAt
  url       String
}

model events {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  description String
  date        DateTime
  title       String
  uid         String
  updatedAt   DateTime @updatedAt
}

model currency {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  name        String
  symbol      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  expenses    expense[]
  billExpense billExpense[]
}

model category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  expense[]
}

model paymentType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  expense[]
}

model expense {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  currency      currency    @relation(fields: [currencyId], references: [id])
  currencyId    String      @db.ObjectId
  amount        Float
  category      category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.ObjectId
  paymentType   paymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId String      @db.ObjectId
  date          DateTime
  title         String
  description   String?
  uid           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model bookmarks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title     String
  comment   String
  url       String
  uid       String
  updatedAt DateTime @updatedAt
}

model billGroup {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     billMember[]
  expenses    billExpense[]
}

model billMember {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String // Clerk user ID
  isCreator Boolean     @default(false) // Flag to identify the creator
  group     billGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  shares    billShare[]
}

enum SplitType {
  equal
  percentage
  amount
}

model billExpense {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  currency    currency         @relation(fields: [currencyId], references: [id])
  currencyId  String           @db.ObjectId
  paidBy      String
  addedBy     String // Added field to track who added the expense
  group       billGroup        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String           @db.ObjectId
  splitType   SplitType // "equal", "percentage", "amount"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  shares      billShare[]
  history     expenseHistory[]
}

model billShare {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  expense    billExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId  String      @db.ObjectId
  member     billMember  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String      @db.ObjectId
  amount     Float
  percentage Float?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model expenseHistory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  expense   billExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String      @db.ObjectId
  updatedBy String // User ID who made the change
  changes   Json // JSON object containing the changes made
  createdAt DateTime    @default(now())
}
